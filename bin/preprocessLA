#! /usr/bin/env python3

import argparse
from leafareavision import preprocess
from glob import glob

parser = argparse.ArgumentParser(description='Preprocess a folder of images')
parser.add_argument('path_in', type = str, help=' folder to list images from')
parser.add_argument('-path_out', type = str, help=' folder to list save images to', default="./")
parser.add_argument('-crop_top', type = int, help=' four integers; number of pixels to be removed form (top, bottom, left, right) of the image', default=0)
parser.add_argument('-crop_bottom', type = int, help=' four integers; number of pixels to be removed form (top, bottom, left, right) of the image', default=0)
parser.add_argument('-crop_left', type = int, help=' four integers; number of pixels to be removed form (top, bottom, left, right) of the image', default=0)
parser.add_argument('-crop_right', type = int, help=' four integers; number of pixels to be removed form (top, bottom, left, right) of the image', default=0)
parser.add_argument('-red_scale', help=' add a red scale', action='store_true')
parser.add_argument('-red_scale_pixels', help=' how many pixels on each side of the scale', default=500)
parser.add_argument('-mask_scale', help=' is there an existing scale to mask', action='store_true')
parser.add_argument('-mask_offset_x', help=' offset for white mask in pixels from left to right', default=0)
parser.add_argument('-mask_offset_y', help=' offset for white mask in pixels from top to bottom', default=0)
parser.add_argument('-mask_pixels', help=' how large should the masking window be', default=500)

args = parser.parse_args()

crop = (args.crop_top, args.crop_bottom, args.crop_left, args.crop_right)

if sum(crop) == 0:
    crop = False

images = glob(args.path_in, recursive=True)

for i in images:
    preprocess(i, path=args.path_out, crop=crop, red_scale=args.red_scale, red_scale_pixels=args.red_scale_pixels,
               mask_scale=args.mask_scale, mask_offset_x=args.mask_offset_x, mask_offset_y=args.mask_offset_x,
               mask_pixels=args.mask_pixels)